{"ast":{"type":"Document","children":[{"type":"Yaml","value":"title: '浅谈JavaScript模块化'\ntags: ['前端工程化', '前端', 'NodeJS', 'CommonJs', 'ES Module', 'AMD']\nrecommend: 'frontend'\nicon: '😁'\ncover: 'https://i.328888.xyz/2023/01/02/tNist.png'","loc":{"start":{"line":1,"column":0},"end":{"line":7,"column":3}},"range":[0,180],"raw":"---\ntitle: '浅谈JavaScript模块化'\ntags: ['前端工程化', '前端', 'NodeJS', 'CommonJs', 'ES Module', 'AMD']\nrecommend: 'frontend'\nicon: '😁'\ncover: 'https://i.328888.xyz/2023/01/02/tNist.png'\n---"},{"type":"Header","depth":1,"children":[{"type":"Str","value":"浅谈 JavaScript 模块化","loc":{"start":{"line":8,"column":2},"end":{"line":8,"column":19}},"range":[183,200],"raw":"浅谈 JavaScript 模块化"}],"loc":{"start":{"line":8,"column":0},"end":{"line":8,"column":19}},"range":[181,200],"raw":"# 浅谈 JavaScript 模块化"},{"type":"Paragraph","children":[{"type":"Str","value":"JavaScript 在最开始时是没有模块化的概念的，即使在浏览器中使用多个 script 标签加载的 js，仍然是共享的全局变量空间。","loc":{"start":{"line":10,"column":0},"end":{"line":10,"column":68}},"range":[202,270],"raw":"JavaScript 在最开始时是没有模块化的概念的，即使在浏览器中使用多个 script 标签加载的 js，仍然是共享的全局变量空间。"}],"loc":{"start":{"line":10,"column":0},"end":{"line":10,"column":68}},"range":[202,270],"raw":"JavaScript 在最开始时是没有模块化的概念的，即使在浏览器中使用多个 script 标签加载的 js，仍然是共享的全局变量空间。"},{"type":"Paragraph","children":[{"type":"Strong","children":[{"type":"Str","value":"模块化规范","loc":{"start":{"line":12,"column":2},"end":{"line":12,"column":7}},"range":[274,279],"raw":"模块化规范"}],"loc":{"start":{"line":12,"column":0},"end":{"line":12,"column":9}},"range":[272,281],"raw":"**模块化规范**"},{"type":"Str","value":"为 JavaScript 提供了模块编写、模块依赖和模块运行的方案。","loc":{"start":{"line":12,"column":9},"end":{"line":12,"column":43}},"range":[281,315],"raw":"为 JavaScript 提供了模块编写、模块依赖和模块运行的方案。"}],"loc":{"start":{"line":12,"column":0},"end":{"line":12,"column":43}},"range":[272,315],"raw":"**模块化规范**为 JavaScript 提供了模块编写、模块依赖和模块运行的方案。"},{"type":"Paragraph","children":[{"type":"Str","value":"总体来说，目前 JavaScript 有两种模块化规范(esm 和 CommonJS)，","loc":{"start":{"line":14,"column":0},"end":{"line":14,"column":44}},"range":[317,361],"raw":"总体来说，目前 JavaScript 有两种模块化规范(esm 和 CommonJS)，"},{"type":"Strong","children":[{"type":"Str","value":"并且这两种模块化规范并不完全兼容","loc":{"start":{"line":14,"column":46},"end":{"line":14,"column":62}},"range":[363,379],"raw":"并且这两种模块化规范并不完全兼容"}],"loc":{"start":{"line":14,"column":44},"end":{"line":14,"column":64}},"range":[361,381],"raw":"**并且这两种模块化规范并不完全兼容**"},{"type":"Str","value":"。","loc":{"start":{"line":14,"column":64},"end":{"line":14,"column":65}},"range":[381,382],"raw":"。"}],"loc":{"start":{"line":14,"column":0},"end":{"line":14,"column":65}},"range":[317,382],"raw":"总体来说，目前 JavaScript 有两种模块化规范(esm 和 CommonJS)，**并且这两种模块化规范并不完全兼容**。"},{"type":"Header","depth":2,"children":[{"type":"Str","value":"1. CommonJS","loc":{"start":{"line":16,"column":3},"end":{"line":16,"column":14}},"range":[387,398],"raw":"1. CommonJS"}],"loc":{"start":{"line":16,"column":0},"end":{"line":16,"column":14}},"range":[384,398],"raw":"## 1. CommonJS"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"概述","loc":{"start":{"line":18,"column":4},"end":{"line":18,"column":6}},"range":[404,406],"raw":"概述"}],"loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":6}},"range":[400,406],"raw":"### 概述"},{"type":"Paragraph","children":[{"type":"Str","value":"CommonJS 是 Node 默认的模块化方案。","loc":{"start":{"line":20,"column":0},"end":{"line":20,"column":25}},"range":[408,433],"raw":"CommonJS 是 Node 默认的模块化方案。"}],"loc":{"start":{"line":20,"column":0},"end":{"line":20,"column":25}},"range":[408,433],"raw":"CommonJS 是 Node 默认的模块化方案。"},{"type":"Paragraph","children":[{"type":"Str","value":"require/exports 是由 JavaScript 社区开发者在 ECMAScript 制定模块化规则之前，自行拟定的规则，得到了广泛的承认和使用。","loc":{"start":{"line":22,"column":0},"end":{"line":22,"column":78}},"range":[435,513],"raw":"require/exports 是由 JavaScript 社区开发者在 ECMAScript 制定模块化规则之前，自行拟定的规则，得到了广泛的承认和使用。"}],"loc":{"start":{"line":22,"column":0},"end":{"line":22,"column":78}},"range":[435,513],"raw":"require/exports 是由 JavaScript 社区开发者在 ECMAScript 制定模块化规则之前，自行拟定的规则，得到了广泛的承认和使用。"},{"type":"Paragraph","children":[{"type":"Str","value":"CommonJS 就是其代表性的模块化规范，也是 NodeJS 使用的模块化方案，并且 NodeJS 已经有很多基于 CommonJS 的包。","loc":{"start":{"line":24,"column":0},"end":{"line":24,"column":71}},"range":[515,586],"raw":"CommonJS 就是其代表性的模块化规范，也是 NodeJS 使用的模块化方案，并且 NodeJS 已经有很多基于 CommonJS 的包。"}],"loc":{"start":{"line":24,"column":0},"end":{"line":24,"column":71}},"range":[515,586],"raw":"CommonJS 就是其代表性的模块化规范，也是 NodeJS 使用的模块化方案，并且 NodeJS 已经有很多基于 CommonJS 的包。"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"加载过程","loc":{"start":{"line":26,"column":4},"end":{"line":26,"column":8}},"range":[592,596],"raw":"加载过程"}],"loc":{"start":{"line":26,"column":0},"end":{"line":26,"column":8}},"range":[588,596],"raw":"### 加载过程"},{"type":"Paragraph","children":[{"type":"Strong","children":[{"type":"Str","value":"CommonJS 模块是动态并且同步执行的","loc":{"start":{"line":28,"column":2},"end":{"line":28,"column":23}},"range":[600,621],"raw":"CommonJS 模块是动态并且同步执行的"}],"loc":{"start":{"line":28,"column":0},"end":{"line":28,"column":25}},"range":[598,623],"raw":"**CommonJS 模块是动态并且同步执行的**"},{"type":"Str","value":"，执行到 require 函数语句时，对应的文件才会被加载并执行，将左右 module.exports 上设置的内容返回，所以在使用 require 时，并不要求 require 的位置，该语句可以在任意位置执行。","loc":{"start":{"line":28,"column":25},"end":{"line":28,"column":132}},"range":[623,730],"raw":"，执行到 require 函数语句时，对应的文件才会被加载并执行，将左右 module.exports 上设置的内容返回，所以在使用 require 时，并不要求 require 的位置，该语句可以在任意位置执行。"}],"loc":{"start":{"line":28,"column":0},"end":{"line":28,"column":132}},"range":[598,730],"raw":"**CommonJS 模块是动态并且同步执行的**，执行到 require 函数语句时，对应的文件才会被加载并执行，将左右 module.exports 上设置的内容返回，所以在使用 require 时，并不要求 require 的位置，该语句可以在任意位置执行。"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"特点","loc":{"start":{"line":30,"column":4},"end":{"line":30,"column":6}},"range":[736,738],"raw":"特点"}],"loc":{"start":{"line":30,"column":0},"end":{"line":30,"column":6}},"range":[732,738],"raw":"### 特点"},{"type":"Paragraph","children":[{"type":"Str","value":"导入包时使用的 ","loc":{"start":{"line":32,"column":0},"end":{"line":32,"column":8}},"range":[740,748],"raw":"导入包时使用的 "},{"type":"Strong","children":[{"type":"Str","value":"require 只是普通的函数，exports 也只是一个普通对象","loc":{"start":{"line":32,"column":10},"end":{"line":32,"column":43}},"range":[750,783],"raw":"require 只是普通的函数，exports 也只是一个普通对象"}],"loc":{"start":{"line":32,"column":8},"end":{"line":32,"column":45}},"range":[748,785],"raw":"**require 只是普通的函数，exports 也只是一个普通对象**"},{"type":"Str","value":"，所以：","loc":{"start":{"line":32,"column":45},"end":{"line":32,"column":49}},"range":[785,789],"raw":"，所以："}],"loc":{"start":{"line":32,"column":0},"end":{"line":32,"column":49}},"range":[740,789],"raw":"导入包时使用的 **require 只是普通的函数，exports 也只是一个普通对象**，所以："},{"type":"List","ordered":false,"start":null,"spread":false,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"对于基础数据类型（例如 number、string 等），通过 exports 暴露后再从 require 引入是值传递，如果模块内的值在 exports 后发生变化，","loc":{"start":{"line":34,"column":2},"end":{"line":34,"column":86}},"range":[793,877],"raw":"对于基础数据类型（例如 number、string 等），通过 exports 暴露后再从 require 引入是值传递，如果模块内的值在 exports 后发生变化，"},{"type":"Strong","children":[{"type":"Str","value":"由 require 引入的该值并不会发生变化","loc":{"start":{"line":34,"column":88},"end":{"line":34,"column":110}},"range":[879,901],"raw":"由 require 引入的该值并不会发生变化"}],"loc":{"start":{"line":34,"column":86},"end":{"line":34,"column":112}},"range":[877,903],"raw":"**由 require 引入的该值并不会发生变化**"},{"type":"Str","value":"。","loc":{"start":{"line":34,"column":112},"end":{"line":34,"column":113}},"range":[903,904],"raw":"。"}],"loc":{"start":{"line":34,"column":2},"end":{"line":34,"column":113}},"range":[793,904],"raw":"对于基础数据类型（例如 number、string 等），通过 exports 暴露后再从 require 引入是值传递，如果模块内的值在 exports 后发生变化，**由 require 引入的该值并不会发生变化**。"}],"loc":{"start":{"line":34,"column":0},"end":{"line":34,"column":113}},"range":[791,904],"raw":"- 对于基础数据类型（例如 number、string 等），通过 exports 暴露后再从 require 引入是值传递，如果模块内的值在 exports 后发生变化，**由 require 引入的该值并不会发生变化**。"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"对于复杂数据类型（对象等），通过 exports 暴露后再通过 require 引入时，是浅拷贝。","loc":{"start":{"line":35,"column":2},"end":{"line":35,"column":51}},"range":[907,956],"raw":"对于复杂数据类型（对象等），通过 exports 暴露后再通过 require 引入时，是浅拷贝。"}],"loc":{"start":{"line":35,"column":2},"end":{"line":35,"column":51}},"range":[907,956],"raw":"对于复杂数据类型（对象等），通过 exports 暴露后再通过 require 引入时，是浅拷贝。"}],"loc":{"start":{"line":35,"column":0},"end":{"line":35,"column":51}},"range":[905,956],"raw":"- 对于复杂数据类型（对象等），通过 exports 暴露后再通过 require 引入时，是浅拷贝。"}],"loc":{"start":{"line":34,"column":0},"end":{"line":35,"column":51}},"range":[791,956],"raw":"- 对于基础数据类型（例如 number、string 等），通过 exports 暴露后再从 require 引入是值传递，如果模块内的值在 exports 后发生变化，**由 require 引入的该值并不会发生变化**。\n- 对于复杂数据类型（对象等），通过 exports 暴露后再通过 require 引入时，是浅拷贝。"},{"type":"HorizontalRule","loc":{"start":{"line":37,"column":0},"end":{"line":37,"column":17}},"range":[958,975],"raw":"*****************"},{"type":"Header","depth":2,"children":[{"type":"Str","value":"2. ES Module","loc":{"start":{"line":39,"column":3},"end":{"line":39,"column":15}},"range":[980,992],"raw":"2. ES Module"}],"loc":{"start":{"line":39,"column":0},"end":{"line":39,"column":15}},"range":[977,992],"raw":"## 2. ES Module"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"概述","loc":{"start":{"line":41,"column":4},"end":{"line":41,"column":6}},"range":[998,1000],"raw":"概述"}],"loc":{"start":{"line":41,"column":0},"end":{"line":41,"column":6}},"range":[994,1000],"raw":"### 概述"},{"type":"Paragraph","children":[{"type":"Str","value":"在 ES6 中，引入了一套新的模块化规范，从语言层面实现了模块功能，那就是 ESM。","loc":{"start":{"line":43,"column":0},"end":{"line":43,"column":42}},"range":[1002,1044],"raw":"在 ES6 中，引入了一套新的模块化规范，从语言层面实现了模块功能，那就是 ESM。"}],"loc":{"start":{"line":43,"column":0},"end":{"line":43,"column":42}},"range":[1002,1044],"raw":"在 ES6 中，引入了一套新的模块化规范，从语言层面实现了模块功能，那就是 ESM。"},{"type":"Paragraph","children":[{"type":"Str","value":"ESM 模块的 import 语句，","loc":{"start":{"line":45,"column":0},"end":{"line":45,"column":18}},"range":[1046,1064],"raw":"ESM 模块的 import 语句，"},{"type":"Strong","children":[{"type":"Str","value":"是静态解析的，在编译时，就会解析并加载对应的模块","loc":{"start":{"line":45,"column":20},"end":{"line":45,"column":44}},"range":[1066,1090],"raw":"是静态解析的，在编译时，就会解析并加载对应的模块"}],"loc":{"start":{"line":45,"column":18},"end":{"line":45,"column":46}},"range":[1064,1092],"raw":"**是静态解析的，在编译时，就会解析并加载对应的模块**"},{"type":"Str","value":"。所以使用 ESM 时，import 语句需要在文件的顶层。","loc":{"start":{"line":45,"column":46},"end":{"line":45,"column":76}},"range":[1092,1122],"raw":"。所以使用 ESM 时，import 语句需要在文件的顶层。"}],"loc":{"start":{"line":45,"column":0},"end":{"line":45,"column":76}},"range":[1046,1122],"raw":"ESM 模块的 import 语句，**是静态解析的，在编译时，就会解析并加载对应的模块**。所以使用 ESM 时，import 语句需要在文件的顶层。"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"加载过程","loc":{"start":{"line":47,"column":4},"end":{"line":47,"column":8}},"range":[1128,1132],"raw":"加载过程"}],"loc":{"start":{"line":47,"column":0},"end":{"line":47,"column":8}},"range":[1124,1132],"raw":"### 加载过程"},{"type":"Paragraph","children":[{"type":"Str","value":"在 ESM 中，模块的加载是","loc":{"start":{"line":49,"column":0},"end":{"line":49,"column":14}},"range":[1134,1148],"raw":"在 ESM 中，模块的加载是"},{"type":"Strong","children":[{"type":"Str","value":"异步执行","loc":{"start":{"line":49,"column":16},"end":{"line":49,"column":20}},"range":[1150,1154],"raw":"异步执行"}],"loc":{"start":{"line":49,"column":14},"end":{"line":49,"column":22}},"range":[1148,1156],"raw":"**异步执行**"},{"type":"Str","value":"的。在第一阶段，所有使用到 import 和 export 关键字的语句都会被解析，用来构建","loc":{"start":{"line":49,"column":22},"end":{"line":49,"column":68}},"range":[1156,1202],"raw":"的。在第一阶段，所有使用到 import 和 export 关键字的语句都会被解析，用来构建"},{"type":"Strong","children":[{"type":"Str","value":"依赖关系图","loc":{"start":{"line":49,"column":70},"end":{"line":49,"column":75}},"range":[1204,1209],"raw":"依赖关系图"}],"loc":{"start":{"line":49,"column":68},"end":{"line":49,"column":77}},"range":[1202,1211],"raw":"**依赖关系图**"},{"type":"Str","value":"。在此过程中，被引入的脚本并不会立即执行。","loc":{"start":{"line":49,"column":77},"end":{"line":49,"column":98}},"range":[1211,1232],"raw":"。在此过程中，被引入的脚本并不会立即执行。"}],"loc":{"start":{"line":49,"column":0},"end":{"line":49,"column":98}},"range":[1134,1232],"raw":"在 ESM 中，模块的加载是**异步执行**的。在第一阶段，所有使用到 import 和 export 关键字的语句都会被解析，用来构建**依赖关系图**。在此过程中，被引入的脚本并不会立即执行。"},{"type":"Paragraph","children":[{"type":"Str","value":"ESM 模块在加载的过程中，不需要实际执行被引入的文件的代码，一些 named import 内的错误就可以被发现。","loc":{"start":{"line":51,"column":0},"end":{"line":51,"column":58}},"range":[1234,1292],"raw":"ESM 模块在加载的过程中，不需要实际执行被引入的文件的代码，一些 named import 内的错误就可以被发现。"}],"loc":{"start":{"line":51,"column":0},"end":{"line":51,"column":58}},"range":[1234,1292],"raw":"ESM 模块在加载的过程中，不需要实际执行被引入的文件的代码，一些 named import 内的错误就可以被发现。"},{"type":"Paragraph","children":[{"type":"Str","value":"ESM 模块在加载的过程中，会从入口文件开始，根据 import 关键字语句，由外到内构建模块之间的**依赖关系图，**直到没有任何其他依赖的模块。然后由内向外执行，一个模块依赖的其他模块都执行完成以后，这个模块才能得到执行。","loc":{"start":{"line":53,"column":0},"end":{"line":53,"column":113}},"range":[1294,1407],"raw":"ESM 模块在加载的过程中，会从入口文件开始，根据 import 关键字语句，由外到内构建模块之间的**依赖关系图，**直到没有任何其他依赖的模块。然后由内向外执行，一个模块依赖的其他模块都执行完成以后，这个模块才能得到执行。"}],"loc":{"start":{"line":53,"column":0},"end":{"line":53,"column":113}},"range":[1294,1407],"raw":"ESM 模块在加载的过程中，会从入口文件开始，根据 import 关键字语句，由外到内构建模块之间的**依赖关系图，**直到没有任何其他依赖的模块。然后由内向外执行，一个模块依赖的其他模块都执行完成以后，这个模块才能得到执行。"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"特点","loc":{"start":{"line":55,"column":4},"end":{"line":55,"column":6}},"range":[1413,1415],"raw":"特点"}],"loc":{"start":{"line":55,"column":0},"end":{"line":55,"column":6}},"range":[1409,1415],"raw":"### 特点"},{"type":"Header","depth":4,"children":[{"type":"Str","value":"1. ESM 导入和导出是引用传递","loc":{"start":{"line":57,"column":5},"end":{"line":57,"column":22}},"range":[1422,1439],"raw":"1. ESM 导入和导出是引用传递"}],"loc":{"start":{"line":57,"column":0},"end":{"line":57,"column":22}},"range":[1417,1439],"raw":"#### 1. ESM 导入和导出是引用传递"},{"type":"Paragraph","children":[{"type":"Str","value":"通过 export 导出值，通过 import 导入，**这两个是关键字，**且使用 export 导出的值是引用传递（两个标识符指向的是同一块内存）","loc":{"start":{"line":59,"column":0},"end":{"line":59,"column":75}},"range":[1441,1516],"raw":"通过 export 导出值，通过 import 导入，**这两个是关键字，**且使用 export 导出的值是引用传递（两个标识符指向的是同一块内存）"}],"loc":{"start":{"line":59,"column":0},"end":{"line":59,"column":75}},"range":[1441,1516],"raw":"通过 export 导出值，通过 import 导入，**这两个是关键字，**且使用 export 导出的值是引用传递（两个标识符指向的是同一块内存）"},{"type":"CodeBlock","lang":"jsx","meta":null,"value":"// a.js\nexport let a = 1;\nexport function changeA(v) {\n\ta = v;\n}\n\n// b.js\nimport { a, changeA } from 'a';\nconsole.log(a);\nchangeA(2);\nconsole.log(a);\n\n// 输出\n// 1\n// 2","loc":{"start":{"line":61,"column":0},"end":{"line":77,"column":3}},"range":[1518,1695],"raw":"```jsx\n// a.js\nexport let a = 1;\nexport function changeA(v) {\n\ta = v;\n}\n\n// b.js\nimport { a, changeA } from 'a';\nconsole.log(a);\nchangeA(2);\nconsole.log(a);\n\n// 输出\n// 1\n// 2\n```"},{"type":"Header","depth":4,"children":[{"type":"Str","value":"2. ESM 模块内支持 Top Level Await","loc":{"start":{"line":79,"column":5},"end":{"line":79,"column":33}},"range":[1702,1730],"raw":"2. ESM 模块内支持 Top Level Await"}],"loc":{"start":{"line":79,"column":0},"end":{"line":79,"column":33}},"range":[1697,1730],"raw":"#### 2. ESM 模块内支持 Top Level Await"},{"type":"Paragraph","children":[{"type":"Str","value":"得益于 esm 模块的加载机制，模块的执行发生在依赖关系图构建完成以后，在 esm 模块内，可以在模块的顶层使用 await 关键字。","loc":{"start":{"line":81,"column":0},"end":{"line":81,"column":67}},"range":[1732,1799],"raw":"得益于 esm 模块的加载机制，模块的执行发生在依赖关系图构建完成以后，在 esm 模块内，可以在模块的顶层使用 await 关键字。"}],"loc":{"start":{"line":81,"column":0},"end":{"line":81,"column":67}},"range":[1732,1799],"raw":"得益于 esm 模块的加载机制，模块的执行发生在依赖关系图构建完成以后，在 esm 模块内，可以在模块的顶层使用 await 关键字。"},{"type":"Paragraph","children":[{"type":"Str","value":"下面是一段引用自 v8 博客(","loc":{"start":{"line":83,"column":0},"end":{"line":83,"column":15}},"range":[1801,1816],"raw":"下面是一段引用自 v8 博客("},{"type":"Link","title":null,"url":"https://v8.dev/features/top-level-await","children":[{"type":"Str","value":"Top-level await","loc":{"start":{"line":83,"column":16},"end":{"line":83,"column":31}},"range":[1817,1832],"raw":"Top-level await"}],"loc":{"start":{"line":83,"column":15},"end":{"line":83,"column":73}},"range":[1816,1874],"raw":"[Top-level await](https://v8.dev/features/top-level-await)"},{"type":"Str","value":")的一段：","loc":{"start":{"line":83,"column":73},"end":{"line":83,"column":78}},"range":[1874,1879],"raw":")的一段："}],"loc":{"start":{"line":83,"column":0},"end":{"line":83,"column":78}},"range":[1801,1879],"raw":"下面是一段引用自 v8 博客([Top-level await](https://v8.dev/features/top-level-await))的一段："},{"type":"BlockQuote","children":[{"type":"Paragraph","children":[{"type":"Str","value":"Perhaps you have seen the infamous gist by Rich Harris which initially outlined a number of concerns about top-level await and urged the JavaScript language not to implement the feature. Some specific concerns were:","loc":{"start":{"line":85,"column":2},"end":{"line":85,"column":217}},"range":[1883,2098],"raw":"Perhaps you have seen the infamous gist by Rich Harris which initially outlined a number of concerns about top-level await and urged the JavaScript language not to implement the feature. Some specific concerns were:"}],"loc":{"start":{"line":85,"column":2},"end":{"line":85,"column":217}},"range":[1883,2098],"raw":"Perhaps you have seen the infamous gist by Rich Harris which initially outlined a number of concerns about top-level await and urged the JavaScript language not to implement the feature. Some specific concerns were:"},{"type":"List","ordered":false,"start":null,"spread":false,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"Top-level await could block execution.","loc":{"start":{"line":87,"column":4},"end":{"line":87,"column":42}},"range":[2105,2143],"raw":"Top-level await could block execution."}],"loc":{"start":{"line":87,"column":4},"end":{"line":87,"column":42}},"range":[2105,2143],"raw":"Top-level await could block execution."}],"loc":{"start":{"line":87,"column":2},"end":{"line":87,"column":42}},"range":[2103,2143],"raw":"- Top-level await could block execution."},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"Top-level await could block fetching resources.","loc":{"start":{"line":88,"column":4},"end":{"line":88,"column":51}},"range":[2148,2195],"raw":"Top-level await could block fetching resources."}],"loc":{"start":{"line":88,"column":4},"end":{"line":88,"column":51}},"range":[2148,2195],"raw":"Top-level await could block fetching resources."}],"loc":{"start":{"line":88,"column":2},"end":{"line":88,"column":51}},"range":[2146,2195],"raw":"- Top-level await could block fetching resources."},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"There would be no clear interop story for CommonJS modules.","loc":{"start":{"line":89,"column":4},"end":{"line":89,"column":63}},"range":[2200,2259],"raw":"There would be no clear interop story for CommonJS modules."}],"loc":{"start":{"line":89,"column":4},"end":{"line":89,"column":63}},"range":[2200,2259],"raw":"There would be no clear interop story for CommonJS modules."}],"loc":{"start":{"line":89,"column":2},"end":{"line":89,"column":63}},"range":[2198,2259],"raw":"- There would be no clear interop story for CommonJS modules."}],"loc":{"start":{"line":87,"column":2},"end":{"line":90,"column":1}},"range":[2103,2261],"raw":"- Top-level await could block execution.\n> - Top-level await could block fetching resources.\n> - There would be no clear interop story for CommonJS modules.\n>"},{"type":"Paragraph","children":[{"type":"Str","value":"The stage 3 version of the proposal directly addresses these issues:","loc":{"start":{"line":91,"column":2},"end":{"line":91,"column":70}},"range":[2264,2332],"raw":"The stage 3 version of the proposal directly addresses these issues:"}],"loc":{"start":{"line":91,"column":2},"end":{"line":91,"column":70}},"range":[2264,2332],"raw":"The stage 3 version of the proposal directly addresses these issues:"},{"type":"List","ordered":false,"start":null,"spread":false,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Strong","children":[{"type":"Str","value":"As siblings are able to execute","loc":{"start":{"line":93,"column":6},"end":{"line":93,"column":37}},"range":[2341,2372],"raw":"As siblings are able to execute"}],"loc":{"start":{"line":93,"column":4},"end":{"line":93,"column":39}},"range":[2339,2374],"raw":"**As siblings are able to execute**"},{"type":"Str","value":", there is no definitive blocking.","loc":{"start":{"line":93,"column":39},"end":{"line":93,"column":73}},"range":[2374,2408],"raw":", there is no definitive blocking."}],"loc":{"start":{"line":93,"column":4},"end":{"line":93,"column":73}},"range":[2339,2408],"raw":"**As siblings are able to execute**, there is no definitive blocking."}],"loc":{"start":{"line":93,"column":2},"end":{"line":93,"column":73}},"range":[2337,2408],"raw":"- **As siblings are able to execute**, there is no definitive blocking."},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Strong","children":[{"type":"Str","value":"Top-level await occurs during the execution phase of the module graph","loc":{"start":{"line":94,"column":6},"end":{"line":94,"column":75}},"range":[2415,2484],"raw":"Top-level await occurs during the execution phase of the module graph"}],"loc":{"start":{"line":94,"column":4},"end":{"line":94,"column":77}},"range":[2413,2486],"raw":"**Top-level await occurs during the execution phase of the module graph**"},{"type":"Str","value":". At this point all resources have already been fetched and linked. There is no risk of blocking fetching resources.","loc":{"start":{"line":94,"column":77},"end":{"line":94,"column":193}},"range":[2486,2602],"raw":". At this point all resources have already been fetched and linked. There is no risk of blocking fetching resources."}],"loc":{"start":{"line":94,"column":4},"end":{"line":94,"column":193}},"range":[2413,2602],"raw":"**Top-level await occurs during the execution phase of the module graph**. At this point all resources have already been fetched and linked. There is no risk of blocking fetching resources."}],"loc":{"start":{"line":94,"column":2},"end":{"line":94,"column":193}},"range":[2411,2602],"raw":"- **Top-level await occurs during the execution phase of the module graph**. At this point all resources have already been fetched and linked. There is no risk of blocking fetching resources."},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Strong","children":[{"type":"Str","value":"Top-level await is limited to [ESM] modules","loc":{"start":{"line":95,"column":6},"end":{"line":95,"column":49}},"range":[2609,2652],"raw":"Top-level await is limited to [ESM] modules"}],"loc":{"start":{"line":95,"column":4},"end":{"line":95,"column":51}},"range":[2607,2654],"raw":"**Top-level await is limited to [ESM] modules**"},{"type":"Str","value":". There is explicitly no support for scripts or for CommonJS modules.","loc":{"start":{"line":95,"column":51},"end":{"line":95,"column":120}},"range":[2654,2723],"raw":". There is explicitly no support for scripts or for CommonJS modules."}],"loc":{"start":{"line":95,"column":4},"end":{"line":95,"column":120}},"range":[2607,2723],"raw":"**Top-level await is limited to [ESM] modules**. There is explicitly no support for scripts or for CommonJS modules."}],"loc":{"start":{"line":95,"column":2},"end":{"line":95,"column":120}},"range":[2605,2723],"raw":"- **Top-level await is limited to [ESM] modules**. There is explicitly no support for scripts or for CommonJS modules."}],"loc":{"start":{"line":93,"column":2},"end":{"line":95,"column":120}},"range":[2337,2723],"raw":"- **As siblings are able to execute**, there is no definitive blocking.\n> - **Top-level await occurs during the execution phase of the module graph**. At this point all resources have already been fetched and linked. There is no risk of blocking fetching resources.\n> - **Top-level await is limited to [ESM] modules**. There is explicitly no support for scripts or for CommonJS modules."}],"loc":{"start":{"line":85,"column":0},"end":{"line":95,"column":120}},"range":[1881,2723],"raw":"> Perhaps you have seen the infamous gist by Rich Harris which initially outlined a number of concerns about top-level await and urged the JavaScript language not to implement the feature. Some specific concerns were:\n>\n> - Top-level await could block execution.\n> - Top-level await could block fetching resources.\n> - There would be no clear interop story for CommonJS modules.\n>\n> The stage 3 version of the proposal directly addresses these issues:\n>\n> - **As siblings are able to execute**, there is no definitive blocking.\n> - **Top-level await occurs during the execution phase of the module graph**. At this point all resources have already been fetched and linked. There is no risk of blocking fetching resources.\n> - **Top-level await is limited to [ESM] modules**. There is explicitly no support for scripts or for CommonJS modules."},{"type":"CodeBlock","lang":"js","meta":null,"value":"// CommonJS\nconst a = require('a.cjs');\nconst b = require('b.cjs');\n// ESM\nimport { a } from 'a.mjs';\nimport { b } from 'b.mjs';","loc":{"start":{"line":97,"column":0},"end":{"line":104,"column":3}},"range":[2725,2863],"raw":"```js\n// CommonJS\nconst a = require('a.cjs');\nconst b = require('b.cjs');\n// ESM\nimport { a } from 'a.mjs';\nimport { b } from 'b.mjs';\n```"},{"type":"Paragraph","children":[{"type":"Str","value":"由于 CommonJS 的 require 函数是同步执行的，所以如果 a.cjs 内有顶层的 await ，那么 require(’b.cjs’) 的语句就会被阻塞，并且 CommonJS 是在执行到 require 的时候才会加载并执行对应的模块，顶层 await 甚至会阻塞到 b.cjs 资源的加载。","loc":{"start":{"line":106,"column":0},"end":{"line":106,"column":154}},"range":[2865,3019],"raw":"由于 CommonJS 的 require 函数是同步执行的，所以如果 a.cjs 内有顶层的 await ，那么 require(’b.cjs’) 的语句就会被阻塞，并且 CommonJS 是在执行到 require 的时候才会加载并执行对应的模块，顶层 await 甚至会阻塞到 b.cjs 资源的加载。"}],"loc":{"start":{"line":106,"column":0},"end":{"line":106,"column":154}},"range":[2865,3019],"raw":"由于 CommonJS 的 require 函数是同步执行的，所以如果 a.cjs 内有顶层的 await ，那么 require(’b.cjs’) 的语句就会被阻塞，并且 CommonJS 是在执行到 require 的时候才会加载并执行对应的模块，顶层 await 甚至会阻塞到 b.cjs 资源的加载。"},{"type":"Paragraph","children":[{"type":"Str","value":"但是在 ESM 中就不会有这个问题，因为 import 的构建依赖关系图的过程是在编译时就会确定好了，此时不会执行模块的代码。各个模块也是在一个异步的函数内执行的，所以模块执行时也不会相互阻塞。","loc":{"start":{"line":108,"column":0},"end":{"line":108,"column":97}},"range":[3021,3118],"raw":"但是在 ESM 中就不会有这个问题，因为 import 的构建依赖关系图的过程是在编译时就会确定好了，此时不会执行模块的代码。各个模块也是在一个异步的函数内执行的，所以模块执行时也不会相互阻塞。"}],"loc":{"start":{"line":108,"column":0},"end":{"line":108,"column":97}},"range":[3021,3118],"raw":"但是在 ESM 中就不会有这个问题，因为 import 的构建依赖关系图的过程是在编译时就会确定好了，此时不会执行模块的代码。各个模块也是在一个异步的函数内执行的，所以模块执行时也不会相互阻塞。"},{"type":"HorizontalRule","loc":{"start":{"line":110,"column":0},"end":{"line":110,"column":14}},"range":[3120,3134],"raw":"**************"},{"type":"Header","depth":2,"children":[{"type":"Str","value":"3. AMD(define/require)","loc":{"start":{"line":112,"column":3},"end":{"line":112,"column":25}},"range":[3139,3161],"raw":"3. AMD(define/require)"}],"loc":{"start":{"line":112,"column":0},"end":{"line":112,"column":25}},"range":[3136,3161],"raw":"## 3. AMD(define/require)"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"概述","loc":{"start":{"line":114,"column":4},"end":{"line":114,"column":6}},"range":[3167,3169],"raw":"概述"}],"loc":{"start":{"line":114,"column":0},"end":{"line":114,"column":6}},"range":[3163,3169],"raw":"### 概述"},{"type":"Paragraph","children":[{"type":"Str","value":"AMD 也是一种社区开发者实现的 JavaScript 模块化规范，与 CommonJS 不同的是，AMD的导入 require 是","loc":{"start":{"line":116,"column":0},"end":{"line":116,"column":66}},"range":[3171,3237],"raw":"AMD 也是一种社区开发者实现的 JavaScript 模块化规范，与 CommonJS 不同的是，AMD的导入 require 是"},{"type":"Strong","children":[{"type":"Str","value":"异步","loc":{"start":{"line":116,"column":68},"end":{"line":116,"column":70}},"range":[3239,3241],"raw":"异步"}],"loc":{"start":{"line":116,"column":66},"end":{"line":116,"column":72}},"range":[3237,3243],"raw":"**异步**"},{"type":"Str","value":"的，AMD 模块化规范是可以不需要转换，通过在浏览器内引入 AMD 实现（最具有代表性的实现 ","loc":{"start":{"line":116,"column":72},"end":{"line":116,"column":119}},"range":[3243,3290],"raw":"的，AMD 模块化规范是可以不需要转换，通过在浏览器内引入 AMD 实现（最具有代表性的实现 "},{"type":"Link","title":null,"url":"https://requirejs.org/","children":[{"type":"Str","value":"requirejs","loc":{"start":{"line":116,"column":120},"end":{"line":116,"column":129}},"range":[3291,3300],"raw":"requirejs"}],"loc":{"start":{"line":116,"column":119},"end":{"line":116,"column":154}},"range":[3290,3325],"raw":"[requirejs](https://requirejs.org/)"},{"type":"Str","value":"）的方式，在浏览器内直接运行的。","loc":{"start":{"line":116,"column":154},"end":{"line":116,"column":170}},"range":[3325,3341],"raw":"）的方式，在浏览器内直接运行的。"}],"loc":{"start":{"line":116,"column":0},"end":{"line":116,"column":170}},"range":[3171,3341],"raw":"AMD 也是一种社区开发者实现的 JavaScript 模块化规范，与 CommonJS 不同的是，AMD的导入 require 是**异步**的，AMD 模块化规范是可以不需要转换，通过在浏览器内引入 AMD 实现（最具有代表性的实现 [requirejs](https://requirejs.org/)）的方式，在浏览器内直接运行的。"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"实现原理","loc":{"start":{"line":118,"column":4},"end":{"line":118,"column":8}},"range":[3347,3351],"raw":"实现原理"}],"loc":{"start":{"line":118,"column":0},"end":{"line":118,"column":8}},"range":[3343,3351],"raw":"### 实现原理"},{"type":"Paragraph","children":[{"type":"Str","value":"在浏览器内通过 ","loc":{"start":{"line":120,"column":0},"end":{"line":120,"column":8}},"range":[3353,3361],"raw":"在浏览器内通过 "},{"type":"Html","value":"<script>","loc":{"start":{"line":120,"column":8},"end":{"line":120,"column":16}},"range":[3361,3369],"raw":"<script>"},{"type":"Str","value":" 标签引入了 AMD 规范的实现之后，会在浏览器全局注册两个函数:","loc":{"start":{"line":120,"column":16},"end":{"line":120,"column":49}},"range":[3369,3402],"raw":" 标签引入了 AMD 规范的实现之后，会在浏览器全局注册两个函数:"}],"loc":{"start":{"line":120,"column":0},"end":{"line":120,"column":49}},"range":[3353,3402],"raw":"在浏览器内通过 <script> 标签引入了 AMD 规范的实现之后，会在浏览器全局注册两个函数:"},{"type":"List","ordered":false,"start":null,"spread":false,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"define 函数：用于声明模块，接受3个参数，模块的名称、模块依赖的其他模块名称数组以及生成模块的函数","loc":{"start":{"line":122,"column":2},"end":{"line":122,"column":54}},"range":[3406,3458],"raw":"define 函数：用于声明模块，接受3个参数，模块的名称、模块依赖的其他模块名称数组以及生成模块的函数"}],"loc":{"start":{"line":122,"column":2},"end":{"line":122,"column":54}},"range":[3406,3458],"raw":"define 函数：用于声明模块，接受3个参数，模块的名称、模块依赖的其他模块名称数组以及生成模块的函数"}],"loc":{"start":{"line":122,"column":0},"end":{"line":122,"column":54}},"range":[3404,3458],"raw":"- define 函数：用于声明模块，接受3个参数，模块的名称、模块依赖的其他模块名称数组以及生成模块的函数"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"require 函数：用于通过模块的名称导入对应的模块","loc":{"start":{"line":123,"column":2},"end":{"line":123,"column":29}},"range":[3461,3488],"raw":"require 函数：用于通过模块的名称导入对应的模块"}],"loc":{"start":{"line":123,"column":2},"end":{"line":123,"column":29}},"range":[3461,3488],"raw":"require 函数：用于通过模块的名称导入对应的模块"}],"loc":{"start":{"line":123,"column":0},"end":{"line":123,"column":29}},"range":[3459,3488],"raw":"- require 函数：用于通过模块的名称导入对应的模块"}],"loc":{"start":{"line":122,"column":0},"end":{"line":123,"column":29}},"range":[3404,3488],"raw":"- define 函数：用于声明模块，接受3个参数，模块的名称、模块依赖的其他模块名称数组以及生成模块的函数\n- require 函数：用于通过模块的名称导入对应的模块"},{"type":"CodeBlock","lang":"js","meta":null,"value":"// 定义一个模块\ndefine('module', ['dep'], function(dep) {\n  return exports;\n});\n\n// 导入和使用\nrequire(['module'], function(module) {\n});","loc":{"start":{"line":125,"column":0},"end":{"line":134,"column":3}},"range":[3490,3626],"raw":"```js\n// 定义一个模块\ndefine('module', ['dep'], function(dep) {\n  return exports;\n});\n\n// 导入和使用\nrequire(['module'], function(module) {\n});\n```"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"优点","loc":{"start":{"line":136,"column":4},"end":{"line":136,"column":6}},"range":[3632,3634],"raw":"优点"}],"loc":{"start":{"line":136,"column":0},"end":{"line":136,"column":6}},"range":[3628,3634],"raw":"### 优点"},{"type":"List","ordered":false,"start":null,"spread":false,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"可在不转换代码的情况下直接在浏览器中运行；","loc":{"start":{"line":138,"column":2},"end":{"line":138,"column":23}},"range":[3638,3659],"raw":"可在不转换代码的情况下直接在浏览器中运行；"}],"loc":{"start":{"line":138,"column":2},"end":{"line":138,"column":23}},"range":[3638,3659],"raw":"可在不转换代码的情况下直接在浏览器中运行；"}],"loc":{"start":{"line":138,"column":0},"end":{"line":138,"column":23}},"range":[3636,3659],"raw":"- 可在不转换代码的情况下直接在浏览器中运行；"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"可异步加载依赖；","loc":{"start":{"line":139,"column":2},"end":{"line":139,"column":10}},"range":[3662,3670],"raw":"可异步加载依赖；"}],"loc":{"start":{"line":139,"column":2},"end":{"line":139,"column":10}},"range":[3662,3670],"raw":"可异步加载依赖；"}],"loc":{"start":{"line":139,"column":0},"end":{"line":139,"column":10}},"range":[3660,3670],"raw":"- 可异步加载依赖；"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"可并行加载多个依赖；","loc":{"start":{"line":140,"column":2},"end":{"line":140,"column":12}},"range":[3673,3683],"raw":"可并行加载多个依赖；"}],"loc":{"start":{"line":140,"column":2},"end":{"line":140,"column":12}},"range":[3673,3683],"raw":"可并行加载多个依赖；"}],"loc":{"start":{"line":140,"column":0},"end":{"line":140,"column":12}},"range":[3671,3683],"raw":"- 可并行加载多个依赖；"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"代码可运行在浏览器环境和 Node.js 环境下。","loc":{"start":{"line":141,"column":2},"end":{"line":141,"column":27}},"range":[3686,3711],"raw":"代码可运行在浏览器环境和 Node.js 环境下。"}],"loc":{"start":{"line":141,"column":2},"end":{"line":141,"column":27}},"range":[3686,3711],"raw":"代码可运行在浏览器环境和 Node.js 环境下。"}],"loc":{"start":{"line":141,"column":0},"end":{"line":141,"column":27}},"range":[3684,3711],"raw":"- 代码可运行在浏览器环境和 Node.js 环境下。"}],"loc":{"start":{"line":138,"column":0},"end":{"line":141,"column":27}},"range":[3636,3711],"raw":"- 可在不转换代码的情况下直接在浏览器中运行；\n- 可异步加载依赖；\n- 可并行加载多个依赖；\n- 代码可运行在浏览器环境和 Node.js 环境下。"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"缺点","loc":{"start":{"line":143,"column":4},"end":{"line":143,"column":6}},"range":[3717,3719],"raw":"缺点"}],"loc":{"start":{"line":143,"column":0},"end":{"line":143,"column":6}},"range":[3713,3719],"raw":"### 缺点"},{"type":"Paragraph","children":[{"type":"Str","value":"不管是在浏览器环境还是 NodeJS 环境，JavaScript 原生都是不支持 AMD 模块化规范的，需要引入对应的库之后才能使用。","loc":{"start":{"line":145,"column":0},"end":{"line":145,"column":67}},"range":[3721,3788],"raw":"不管是在浏览器环境还是 NodeJS 环境，JavaScript 原生都是不支持 AMD 模块化规范的，需要引入对应的库之后才能使用。"}],"loc":{"start":{"line":145,"column":0},"end":{"line":145,"column":67}},"range":[3721,3788],"raw":"不管是在浏览器环境还是 NodeJS 环境，JavaScript 原生都是不支持 AMD 模块化规范的，需要引入对应的库之后才能使用。"},{"type":"Paragraph","children":[{"type":"Str","value":"并且 AMD 模块化的实现库，必须要在模块声明之前就加载完成。","loc":{"start":{"line":147,"column":0},"end":{"line":147,"column":31}},"range":[3790,3821],"raw":"并且 AMD 模块化的实现库，必须要在模块声明之前就加载完成。"}],"loc":{"start":{"line":147,"column":0},"end":{"line":147,"column":31}},"range":[3790,3821],"raw":"并且 AMD 模块化的实现库，必须要在模块声明之前就加载完成。"},{"type":"Paragraph","children":[{"type":"Str","value":"浏览器原生是不支持 AMD 的，需要导入实现了 AMD 模块化规范的库（例如 ","loc":{"start":{"line":149,"column":0},"end":{"line":149,"column":39}},"range":[3823,3862],"raw":"浏览器原生是不支持 AMD 的，需要导入实现了 AMD 模块化规范的库（例如 "},{"type":"Link","title":null,"url":"https://requirejs.org/","children":[{"type":"Str","value":"requirejs","loc":{"start":{"line":149,"column":40},"end":{"line":149,"column":49}},"range":[3863,3872],"raw":"requirejs"}],"loc":{"start":{"line":149,"column":39},"end":{"line":149,"column":74}},"range":[3862,3897],"raw":"[requirejs](https://requirejs.org/)"},{"type":"Str","value":"），才可以使用。","loc":{"start":{"line":149,"column":74},"end":{"line":149,"column":82}},"range":[3897,3905],"raw":"），才可以使用。"}],"loc":{"start":{"line":149,"column":0},"end":{"line":149,"column":82}},"range":[3823,3905],"raw":"浏览器原生是不支持 AMD 的，需要导入实现了 AMD 模块化规范的库（例如 [requirejs](https://requirejs.org/)），才可以使用。"},{"type":"HorizontalRule","loc":{"start":{"line":151,"column":0},"end":{"line":151,"column":14}},"range":[3907,3921],"raw":"**************"},{"type":"Header","depth":2,"children":[{"type":"Str","value":"4. CommonJS 和 ESM 横向比较","loc":{"start":{"line":153,"column":3},"end":{"line":153,"column":25}},"range":[3926,3948],"raw":"4. CommonJS 和 ESM 横向比较"}],"loc":{"start":{"line":153,"column":0},"end":{"line":153,"column":25}},"range":[3923,3948],"raw":"## 4. CommonJS 和 ESM 横向比较"},{"type":"List","ordered":true,"start":1,"spread":false,"children":[{"type":"ListItem","spread":true,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"使用 esm 编写的模块，","loc":{"start":{"line":155,"column":3},"end":{"line":155,"column":16}},"range":[3953,3966],"raw":"使用 esm 编写的模块，"},{"type":"Strong","children":[{"type":"Str","value":"不能被 require","loc":{"start":{"line":155,"column":18},"end":{"line":155,"column":29}},"range":[3968,3979],"raw":"不能被 require"}],"loc":{"start":{"line":155,"column":16},"end":{"line":155,"column":31}},"range":[3966,3981],"raw":"**不能被 require**"},{"type":"Str","value":"，只能使用 import 关键字导入；","loc":{"start":{"line":155,"column":31},"end":{"line":155,"column":50}},"range":[3981,4000],"raw":"，只能使用 import 关键字导入；"}],"loc":{"start":{"line":155,"column":3},"end":{"line":155,"column":50}},"range":[3953,4000],"raw":"使用 esm 编写的模块，**不能被 require**，只能使用 import 关键字导入；"},{"type":"BlockQuote","children":[{"type":"Paragraph","children":[{"type":"Str","value":"这是由于 esm 模块内是支持顶层 await 的，但是 cjs 模块是不支持的。","loc":{"start":{"line":157,"column":5},"end":{"line":157,"column":46}},"range":[4007,4048],"raw":"这是由于 esm 模块内是支持顶层 await 的，但是 cjs 模块是不支持的。"}],"loc":{"start":{"line":157,"column":5},"end":{"line":157,"column":46}},"range":[4007,4048],"raw":"这是由于 esm 模块内是支持顶层 await 的，但是 cjs 模块是不支持的。"}],"loc":{"start":{"line":157,"column":3},"end":{"line":157,"column":46}},"range":[4005,4048],"raw":"> 这是由于 esm 模块内是支持顶层 await 的，但是 cjs 模块是不支持的。"}],"loc":{"start":{"line":155,"column":0},"end":{"line":157,"column":46}},"range":[3950,4048],"raw":"1. 使用 esm 编写的模块，**不能被 require**，只能使用 import 关键字导入；\n\n   > 这是由于 esm 模块内是支持顶层 await 的，但是 cjs 模块是不支持的。"}],"loc":{"start":{"line":155,"column":0},"end":{"line":157,"column":46}},"range":[3950,4048],"raw":"1. 使用 esm 编写的模块，**不能被 require**，只能使用 import 关键字导入；\n\n   > 这是由于 esm 模块内是支持顶层 await 的，但是 cjs 模块是不支持的。"},{"type":"BlockQuote","children":[],"loc":{"start":{"line":158,"column":0},"end":{"line":158,"column":1}},"range":[4049,4050],"raw":">"},{"type":"List","ordered":true,"start":2,"spread":false,"children":[{"type":"ListItem","spread":true,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"使用 cjs 编写的模块，不能被 import 关键字导入（可以使用 default import 兼容，见第3条），只能使用 require 函数来导入；","loc":{"start":{"line":159,"column":3},"end":{"line":159,"column":81}},"range":[4054,4132],"raw":"使用 cjs 编写的模块，不能被 import 关键字导入（可以使用 default import 兼容，见第3条），只能使用 require 函数来导入；"}],"loc":{"start":{"line":159,"column":3},"end":{"line":159,"column":81}},"range":[4054,4132],"raw":"使用 cjs 编写的模块，不能被 import 关键字导入（可以使用 default import 兼容，见第3条），只能使用 require 函数来导入；"},{"type":"BlockQuote","children":[{"type":"Paragraph","children":[{"type":"Str","value":"这是由于 cjs 编写的模块，其内部导出的内容是动态的，","loc":{"start":{"line":161,"column":5},"end":{"line":161,"column":33}},"range":[4139,4167],"raw":"这是由于 cjs 编写的模块，其内部导出的内容是动态的，"},{"type":"Strong","children":[{"type":"Str","value":"需要被导入的文件执行完成以后","loc":{"start":{"line":161,"column":35},"end":{"line":161,"column":49}},"range":[4169,4183],"raw":"需要被导入的文件执行完成以后"}],"loc":{"start":{"line":161,"column":33},"end":{"line":161,"column":51}},"range":[4167,4185],"raw":"**需要被导入的文件执行完成以后**"},{"type":"Str","value":"，才能确定有哪些内容被挂载到 module.exports 上，而 import 的关键字的解析是需要在编译时进行的，此时模块还没有被执行。","loc":{"start":{"line":161,"column":51},"end":{"line":161,"column":121}},"range":[4185,4255],"raw":"，才能确定有哪些内容被挂载到 module.exports 上，而 import 的关键字的解析是需要在编译时进行的，此时模块还没有被执行。"}],"loc":{"start":{"line":161,"column":5},"end":{"line":161,"column":121}},"range":[4139,4255],"raw":"这是由于 cjs 编写的模块，其内部导出的内容是动态的，**需要被导入的文件执行完成以后**，才能确定有哪些内容被挂载到 module.exports 上，而 import 的关键字的解析是需要在编译时进行的，此时模块还没有被执行。"}],"loc":{"start":{"line":161,"column":3},"end":{"line":161,"column":121}},"range":[4137,4255],"raw":"> 这是由于 cjs 编写的模块，其内部导出的内容是动态的，**需要被导入的文件执行完成以后**，才能确定有哪些内容被挂载到 module.exports 上，而 import 的关键字的解析是需要在编译时进行的，此时模块还没有被执行。"}],"loc":{"start":{"line":159,"column":0},"end":{"line":161,"column":121}},"range":[4051,4255],"raw":"2. 使用 cjs 编写的模块，不能被 import 关键字导入（可以使用 default import 兼容，见第3条），只能使用 require 函数来导入；\n\n   > 这是由于 cjs 编写的模块，其内部导出的内容是动态的，**需要被导入的文件执行完成以后**，才能确定有哪些内容被挂载到 module.exports 上，而 import 的关键字的解析是需要在编译时进行的，此时模块还没有被执行。"}],"loc":{"start":{"line":159,"column":0},"end":{"line":161,"column":121}},"range":[4051,4255],"raw":"2. 使用 cjs 编写的模块，不能被 import 关键字导入（可以使用 default import 兼容，见第3条），只能使用 require 函数来导入；\n\n   > 这是由于 cjs 编写的模块，其内部导出的内容是动态的，**需要被导入的文件执行完成以后**，才能确定有哪些内容被挂载到 module.exports 上，而 import 的关键字的解析是需要在编译时进行的，此时模块还没有被执行。"},{"type":"BlockQuote","children":[],"loc":{"start":{"line":162,"column":0},"end":{"line":162,"column":1}},"range":[4256,4257],"raw":">"},{"type":"List","ordered":true,"start":3,"spread":false,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"使用 cjs 编写的模块，可以被 default import ，但是不能被 named import；","loc":{"start":{"line":163,"column":3},"end":{"line":163,"column":55}},"range":[4261,4313],"raw":"使用 cjs 编写的模块，可以被 default import ，但是不能被 named import；"}],"loc":{"start":{"line":163,"column":3},"end":{"line":163,"column":55}},"range":[4261,4313],"raw":"使用 cjs 编写的模块，可以被 default import ，但是不能被 named import；"}],"loc":{"start":{"line":163,"column":0},"end":{"line":163,"column":55}},"range":[4258,4313],"raw":"3. 使用 cjs 编写的模块，可以被 default import ，但是不能被 named import；"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"可以在 esm 模块内使用 require 来导入 cjs 模块，即使该 cjs 模块使用的是 named export。但是这样的使用可能会在 webpack、rollup 等构建工具中带来不必要的麻烦。","loc":{"start":{"line":164,"column":3},"end":{"line":164,"column":106}},"range":[4317,4420],"raw":"可以在 esm 模块内使用 require 来导入 cjs 模块，即使该 cjs 模块使用的是 named export。但是这样的使用可能会在 webpack、rollup 等构建工具中带来不必要的麻烦。"}],"loc":{"start":{"line":164,"column":3},"end":{"line":164,"column":106}},"range":[4317,4420],"raw":"可以在 esm 模块内使用 require 来导入 cjs 模块，即使该 cjs 模块使用的是 named export。但是这样的使用可能会在 webpack、rollup 等构建工具中带来不必要的麻烦。"}],"loc":{"start":{"line":164,"column":0},"end":{"line":164,"column":106}},"range":[4314,4420],"raw":"4. 可以在 esm 模块内使用 require 来导入 cjs 模块，即使该 cjs 模块使用的是 named export。但是这样的使用可能会在 webpack、rollup 等构建工具中带来不必要的麻烦。"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"cjs 是默认的模块化方案，如果你想使用 esm ，可以将 js 的文件后缀名修改为 .mjs。或者可以","loc":{"start":{"line":165,"column":3},"end":{"line":165,"column":55}},"range":[4424,4476],"raw":"cjs 是默认的模块化方案，如果你想使用 esm ，可以将 js 的文件后缀名修改为 .mjs。或者可以"},{"type":"Strong","children":[{"type":"Str","value":"将 package.json 中的 type 设置为 module ，将 esm 设置为默认的模块化方案","loc":{"start":{"line":165,"column":57},"end":{"line":165,"column":109}},"range":[4478,4530],"raw":"将 package.json 中的 type 设置为 module ，将 esm 设置为默认的模块化方案"}],"loc":{"start":{"line":165,"column":55},"end":{"line":165,"column":111}},"range":[4476,4532],"raw":"**将 package.json 中的 type 设置为 module ，将 esm 设置为默认的模块化方案**"},{"type":"Str","value":"，如果此时想使用 cjs ，需要将对应的文件后缀名改为 .mjs。","loc":{"start":{"line":165,"column":111},"end":{"line":165,"column":144}},"range":[4532,4565],"raw":"，如果此时想使用 cjs ，需要将对应的文件后缀名改为 .mjs。"}],"loc":{"start":{"line":165,"column":3},"end":{"line":165,"column":144}},"range":[4424,4565],"raw":"cjs 是默认的模块化方案，如果你想使用 esm ，可以将 js 的文件后缀名修改为 .mjs。或者可以**将 package.json 中的 type 设置为 module ，将 esm 设置为默认的模块化方案**，如果此时想使用 cjs ，需要将对应的文件后缀名改为 .mjs。"}],"loc":{"start":{"line":165,"column":0},"end":{"line":165,"column":144}},"range":[4421,4565],"raw":"5. cjs 是默认的模块化方案，如果你想使用 esm ，可以将 js 的文件后缀名修改为 .mjs。或者可以**将 package.json 中的 type 设置为 module ，将 esm 设置为默认的模块化方案**，如果此时想使用 cjs ，需要将对应的文件后缀名改为 .mjs。"}],"loc":{"start":{"line":163,"column":0},"end":{"line":165,"column":144}},"range":[4258,4565],"raw":"3. 使用 cjs 编写的模块，可以被 default import ，但是不能被 named import；\n4. 可以在 esm 模块内使用 require 来导入 cjs 模块，即使该 cjs 模块使用的是 named export。但是这样的使用可能会在 webpack、rollup 等构建工具中带来不必要的麻烦。\n5. cjs 是默认的模块化方案，如果你想使用 esm ，可以将 js 的文件后缀名修改为 .mjs。或者可以**将 package.json 中的 type 设置为 module ，将 esm 设置为默认的模块化方案**，如果此时想使用 cjs ，需要将对应的文件后缀名改为 .mjs。"},{"type":"HorizontalRule","loc":{"start":{"line":167,"column":0},"end":{"line":167,"column":13}},"range":[4567,4580],"raw":"*************"},{"type":"Header","depth":2,"children":[{"type":"Str","value":"5. 案例和坑","loc":{"start":{"line":169,"column":3},"end":{"line":169,"column":10}},"range":[4585,4592],"raw":"5. 案例和坑"}],"loc":{"start":{"line":169,"column":0},"end":{"line":169,"column":10}},"range":[4582,4592],"raw":"## 5. 案例和坑"},{"type":"Paragraph","children":[{"type":"Str","value":"随便打开一个 React 项目的 node_modules ，不难发现，其实 React 只提供了 cjs 格式的包：","loc":{"start":{"line":171,"column":0},"end":{"line":171,"column":59}},"range":[4594,4653],"raw":"随便打开一个 React 项目的 node_modules ，不难发现，其实 React 只提供了 cjs 格式的包："}],"loc":{"start":{"line":171,"column":0},"end":{"line":171,"column":59}},"range":[4594,4653],"raw":"随便打开一个 React 项目的 node_modules ，不难发现，其实 React 只提供了 cjs 格式的包："},{"type":"Paragraph","children":[{"type":"Image","title":null,"url":"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/0c6ae159-0da8-4def-a35c-aa22272513d1/Untitled.png","alt":"Untitled","loc":{"start":{"line":173,"column":0},"end":{"line":173,"column":122}},"range":[4655,4777],"raw":"![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/0c6ae159-0da8-4def-a35c-aa22272513d1/Untitled.png)"}],"loc":{"start":{"line":173,"column":0},"end":{"line":173,"column":122}},"range":[4655,4777],"raw":"![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/0c6ae159-0da8-4def-a35c-aa22272513d1/Untitled.png)"},{"type":"Paragraph","children":[{"type":"Str","value":"正常情况下，我们在代码里使用 React 的时候，应该按照下面的方式来引入：","loc":{"start":{"line":175,"column":0},"end":{"line":175,"column":38}},"range":[4779,4817],"raw":"正常情况下，我们在代码里使用 React 的时候，应该按照下面的方式来引入："}],"loc":{"start":{"line":175,"column":0},"end":{"line":175,"column":38}},"range":[4779,4817],"raw":"正常情况下，我们在代码里使用 React 的时候，应该按照下面的方式来引入："},{"type":"CodeBlock","lang":"jsx","meta":null,"value":"import React from 'react';\nconst { useEffect } = React;","loc":{"start":{"line":177,"column":0},"end":{"line":180,"column":3}},"range":[4819,4885],"raw":"```jsx\nimport React from 'react';\nconst { useEffect } = React;\n```"},{"type":"Paragraph","children":[{"type":"Str","value":"但是在项目实际开发的时候，我们直接按照 esm 的方式来引入 React 更为常见，并且也不会报错，执行起来也是没问题的。","loc":{"start":{"line":182,"column":0},"end":{"line":182,"column":61}},"range":[4887,4948],"raw":"但是在项目实际开发的时候，我们直接按照 esm 的方式来引入 React 更为常见，并且也不会报错，执行起来也是没问题的。"}],"loc":{"start":{"line":182,"column":0},"end":{"line":182,"column":61}},"range":[4887,4948],"raw":"但是在项目实际开发的时候，我们直接按照 esm 的方式来引入 React 更为常见，并且也不会报错，执行起来也是没问题的。"},{"type":"CodeBlock","lang":"jsx","meta":null,"value":"import React, { useEffect } from 'react';","loc":{"start":{"line":184,"column":0},"end":{"line":186,"column":3}},"range":[4950,5002],"raw":"```jsx\nimport React, { useEffect } from 'react';\n```"},{"type":"Paragraph","children":[{"type":"Str","value":"这是由于 babel、webpack 等会在编译的时候对 React 进行特殊处理，让其支持通过 esm 的方式来引入 npm 包。","loc":{"start":{"line":188,"column":0},"end":{"line":188,"column":66}},"range":[5004,5070],"raw":"这是由于 babel、webpack 等会在编译的时候对 React 进行特殊处理，让其支持通过 esm 的方式来引入 npm 包。"}],"loc":{"start":{"line":188,"column":0},"end":{"line":188,"column":66}},"range":[5004,5070],"raw":"这是由于 babel、webpack 等会在编译的时候对 React 进行特殊处理，让其支持通过 esm 的方式来引入 npm 包。"}],"loc":{"start":{"line":1,"column":0},"end":{"line":189,"column":0}},"range":[0,5071],"raw":"---\ntitle: '浅谈JavaScript模块化'\ntags: ['前端工程化', '前端', 'NodeJS', 'CommonJs', 'ES Module', 'AMD']\nrecommend: 'frontend'\nicon: '😁'\ncover: 'https://i.328888.xyz/2023/01/02/tNist.png'\n---\n# 浅谈 JavaScript 模块化\n\nJavaScript 在最开始时是没有模块化的概念的，即使在浏览器中使用多个 script 标签加载的 js，仍然是共享的全局变量空间。\n\n**模块化规范**为 JavaScript 提供了模块编写、模块依赖和模块运行的方案。\n\n总体来说，目前 JavaScript 有两种模块化规范(esm 和 CommonJS)，**并且这两种模块化规范并不完全兼容**。\n\n## 1. CommonJS\n\n### 概述\n\nCommonJS 是 Node 默认的模块化方案。\n\nrequire/exports 是由 JavaScript 社区开发者在 ECMAScript 制定模块化规则之前，自行拟定的规则，得到了广泛的承认和使用。\n\nCommonJS 就是其代表性的模块化规范，也是 NodeJS 使用的模块化方案，并且 NodeJS 已经有很多基于 CommonJS 的包。\n\n### 加载过程\n\n**CommonJS 模块是动态并且同步执行的**，执行到 require 函数语句时，对应的文件才会被加载并执行，将左右 module.exports 上设置的内容返回，所以在使用 require 时，并不要求 require 的位置，该语句可以在任意位置执行。\n\n### 特点\n\n导入包时使用的 **require 只是普通的函数，exports 也只是一个普通对象**，所以：\n\n- 对于基础数据类型（例如 number、string 等），通过 exports 暴露后再从 require 引入是值传递，如果模块内的值在 exports 后发生变化，**由 require 引入的该值并不会发生变化**。\n- 对于复杂数据类型（对象等），通过 exports 暴露后再通过 require 引入时，是浅拷贝。\n\n*****************\n\n## 2. ES Module\n\n### 概述\n\n在 ES6 中，引入了一套新的模块化规范，从语言层面实现了模块功能，那就是 ESM。\n\nESM 模块的 import 语句，**是静态解析的，在编译时，就会解析并加载对应的模块**。所以使用 ESM 时，import 语句需要在文件的顶层。\n\n### 加载过程\n\n在 ESM 中，模块的加载是**异步执行**的。在第一阶段，所有使用到 import 和 export 关键字的语句都会被解析，用来构建**依赖关系图**。在此过程中，被引入的脚本并不会立即执行。\n\nESM 模块在加载的过程中，不需要实际执行被引入的文件的代码，一些 named import 内的错误就可以被发现。\n\nESM 模块在加载的过程中，会从入口文件开始，根据 import 关键字语句，由外到内构建模块之间的**依赖关系图，**直到没有任何其他依赖的模块。然后由内向外执行，一个模块依赖的其他模块都执行完成以后，这个模块才能得到执行。\n\n### 特点\n\n#### 1. ESM 导入和导出是引用传递\n\n通过 export 导出值，通过 import 导入，**这两个是关键字，**且使用 export 导出的值是引用传递（两个标识符指向的是同一块内存）\n\n```jsx\n// a.js\nexport let a = 1;\nexport function changeA(v) {\n\ta = v;\n}\n\n// b.js\nimport { a, changeA } from 'a';\nconsole.log(a);\nchangeA(2);\nconsole.log(a);\n\n// 输出\n// 1\n// 2\n```\n\n#### 2. ESM 模块内支持 Top Level Await\n\n得益于 esm 模块的加载机制，模块的执行发生在依赖关系图构建完成以后，在 esm 模块内，可以在模块的顶层使用 await 关键字。\n\n下面是一段引用自 v8 博客([Top-level await](https://v8.dev/features/top-level-await))的一段：\n\n> Perhaps you have seen the infamous gist by Rich Harris which initially outlined a number of concerns about top-level await and urged the JavaScript language not to implement the feature. Some specific concerns were:\n>\n> - Top-level await could block execution.\n> - Top-level await could block fetching resources.\n> - There would be no clear interop story for CommonJS modules.\n>\n> The stage 3 version of the proposal directly addresses these issues:\n>\n> - **As siblings are able to execute**, there is no definitive blocking.\n> - **Top-level await occurs during the execution phase of the module graph**. At this point all resources have already been fetched and linked. There is no risk of blocking fetching resources.\n> - **Top-level await is limited to [ESM] modules**. There is explicitly no support for scripts or for CommonJS modules.\n\n```js\n// CommonJS\nconst a = require('a.cjs');\nconst b = require('b.cjs');\n// ESM\nimport { a } from 'a.mjs';\nimport { b } from 'b.mjs';\n```\n\n由于 CommonJS 的 require 函数是同步执行的，所以如果 a.cjs 内有顶层的 await ，那么 require(’b.cjs’) 的语句就会被阻塞，并且 CommonJS 是在执行到 require 的时候才会加载并执行对应的模块，顶层 await 甚至会阻塞到 b.cjs 资源的加载。\n\n但是在 ESM 中就不会有这个问题，因为 import 的构建依赖关系图的过程是在编译时就会确定好了，此时不会执行模块的代码。各个模块也是在一个异步的函数内执行的，所以模块执行时也不会相互阻塞。\n\n**************\n\n## 3. AMD(define/require)\n\n### 概述\n\nAMD 也是一种社区开发者实现的 JavaScript 模块化规范，与 CommonJS 不同的是，AMD的导入 require 是**异步**的，AMD 模块化规范是可以不需要转换，通过在浏览器内引入 AMD 实现（最具有代表性的实现 [requirejs](https://requirejs.org/)）的方式，在浏览器内直接运行的。\n\n### 实现原理\n\n在浏览器内通过 <script> 标签引入了 AMD 规范的实现之后，会在浏览器全局注册两个函数:\n\n- define 函数：用于声明模块，接受3个参数，模块的名称、模块依赖的其他模块名称数组以及生成模块的函数\n- require 函数：用于通过模块的名称导入对应的模块\n\n```js\n// 定义一个模块\ndefine('module', ['dep'], function(dep) {\n  return exports;\n});\n\n// 导入和使用\nrequire(['module'], function(module) {\n});\n```\n\n### 优点\n\n- 可在不转换代码的情况下直接在浏览器中运行；\n- 可异步加载依赖；\n- 可并行加载多个依赖；\n- 代码可运行在浏览器环境和 Node.js 环境下。\n\n### 缺点\n\n不管是在浏览器环境还是 NodeJS 环境，JavaScript 原生都是不支持 AMD 模块化规范的，需要引入对应的库之后才能使用。\n\n并且 AMD 模块化的实现库，必须要在模块声明之前就加载完成。\n\n浏览器原生是不支持 AMD 的，需要导入实现了 AMD 模块化规范的库（例如 [requirejs](https://requirejs.org/)），才可以使用。\n\n**************\n\n## 4. CommonJS 和 ESM 横向比较\n\n1. 使用 esm 编写的模块，**不能被 require**，只能使用 import 关键字导入；\n\n   > 这是由于 esm 模块内是支持顶层 await 的，但是 cjs 模块是不支持的。\n>\n2. 使用 cjs 编写的模块，不能被 import 关键字导入（可以使用 default import 兼容，见第3条），只能使用 require 函数来导入；\n\n   > 这是由于 cjs 编写的模块，其内部导出的内容是动态的，**需要被导入的文件执行完成以后**，才能确定有哪些内容被挂载到 module.exports 上，而 import 的关键字的解析是需要在编译时进行的，此时模块还没有被执行。\n>\n3. 使用 cjs 编写的模块，可以被 default import ，但是不能被 named import；\n4. 可以在 esm 模块内使用 require 来导入 cjs 模块，即使该 cjs 模块使用的是 named export。但是这样的使用可能会在 webpack、rollup 等构建工具中带来不必要的麻烦。\n5. cjs 是默认的模块化方案，如果你想使用 esm ，可以将 js 的文件后缀名修改为 .mjs。或者可以**将 package.json 中的 type 设置为 module ，将 esm 设置为默认的模块化方案**，如果此时想使用 cjs ，需要将对应的文件后缀名改为 .mjs。\n\n*************\n\n## 5. 案例和坑\n\n随便打开一个 React 项目的 node_modules ，不难发现，其实 React 只提供了 cjs 格式的包：\n\n![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/0c6ae159-0da8-4def-a35c-aa22272513d1/Untitled.png)\n\n正常情况下，我们在代码里使用 React 的时候，应该按照下面的方式来引入：\n\n```jsx\nimport React from 'react';\nconst { useEffect } = React;\n```\n\n但是在项目实际开发的时候，我们直接按照 esm 的方式来引入 React 更为常见，并且也不会报错，执行起来也是没问题的。\n\n```jsx\nimport React, { useEffect } from 'react';\n```\n\n这是由于 babel、webpack 等会在编译的时候对 React 进行特殊处理，让其支持通过 esm 的方式来引入 npm 包。\n"},"catalogue":{"title":"浅谈JavaScript模块化","json-path":"2023-01-03-浅谈Javascript模块化.json","mdate":"2023-01-03","cover":"https://i.328888.xyz/2023/01/02/tNist.png","icon":"😁","tags":["前端工程化","前端","NodeJS","CommonJs","ES Module","AMD"],"recommend":"frontend"}}